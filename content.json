[{"title":"ios开发证书技巧","date":"2016-05-30T05:04:06.000Z","path":"2016/05/30/ios开发证书技巧/","text":"开发证书，其实挺简单的，但如果某处搞不好，也是很费时间的。且member center里的内容虽说万变不离其宗，但几年下来终归还是有变化的。完整的流程我就不写了，可以自行百度大把文章，这边谈谈证书使用的小技巧。 证书制作流程图 对于概念不懂的同学，可以到这脑补下『iOS Provisioning Profile(Certificate)与Code Signing详解』 关于Provisioning Profile供应配置管理我们在项目配置时，虽然经常将Code Signing的Provisioning Profile配置成”Automatic”，但还是需要去developer.apple.com上下载所有的mobileprovision文件。如果这些文件经常变化，可以这样： 首先cd到这些mobileprovision文件的目录”~/Library/MobileDevice/Provisioning Profiles”，然后删除所有的文件。可使用命令 1$ rm *.mobileprovision 这样再看Xcode的时候，就找不到任何provisioning profile了。这个时候不需要一个一个的添加。而是访问XCode的Preferences&gt; Accounts，在Apple IDs里面找到你的帐号，右下角有个View Details，这时，你就可以download下所有网站上配置的文件了。一个按钮搞定。","tags":[{"name":"iOS","slug":"iOS","permalink":"http://iherr.cn/tags/iOS/"}]},{"title":"xcode runsript案例","date":"2016-05-20T03:53:34.000Z","path":"2016/05/20/xcode-runsript案例/","text":"runscript介绍在我理解，runscript是在app编译时，通知xcode额外做的事情，可以通过script编写脚本来实现。 runscript案例1-appledocappledoc是我们较为常用的文档生成工具，『github地址传送门』 安装方法请执行： 123$ git clone git://github.com/tomaz/appledoc.git$ cd appledoc$ sudo sh install-appledoc.sh 安装完成后，我们想着每次在编译ios app时，都能自动生成文档。 在项目中新建一个target，选择如下图所示的类别。这样会在项目中多出一个target。 对该target的Build Phases上添加run script phrase。 为了自动生成文档，需要使用appledoc的生成命令，可供粘贴。如果对命令不熟练，也可以使用appledoc –help进行查看。 script脚本如下，供copy。需要注意的是outputPath，为文档的输出路径。ignore，可以选择不生成某些路径下的文档。最后的参数，”{PROJECT_DIR}/runscript)”，需要根据自己需要生成的项目做调整。 12345678910111213141516171819202122232425262728#appledoc Xcode script# Start constantscompany=\"herr\";companyID=\"com.herr\";companyURL=\"http://iherr.cn\";target=\"iphoneos\";#target=\"macosx\";outputPath=\"$&#123;PROJECT_DIR&#125;\"/Doc;# End constants/usr/local/bin/appledoc \\--project-name \"$&#123;PROJECT_NAME&#125;\" \\--project-company \"$&#123;company&#125;\" \\--company-id \"$&#123;companyID&#125;\" \\--docset-atom-filename \"$&#123;company&#125;.atom\" \\--docset-feed-url \"$&#123;companyURL&#125;/$&#123;company&#125;/%DOCSETATOMFILENAME\" \\--docset-package-url \"$&#123;companyURL&#125;/$&#123;company&#125;/%DOCSETPACKAGEFILENAME\" \\--docset-fallback-url \"$&#123;companyURL&#125;/$&#123;company&#125;\" \\--output \"$&#123;outputPath&#125;\" \\--ignore \"$&#123;PROJECT_DIR&#125;\"/runscript/Libs \\--publish-docset \\--docset-platform-family \"$&#123;target&#125;\" \\--logformat xcode \\--keep-intermediate-files \\--no-repeat-first-par \\--no-warn-invalid-crossref \\--exit-threshold 2 \\\"$&#123;PROJECT_DIR&#125;\"/runscript 完成后，编译运行，可以在xcode上看到编译结果。里面有run script的执行情况，当然可以在script中使用printf来打印，也同样会在这里显示。 这样，我们可以在项目目录的doc文件夹里找到生成的文档，或者到xcode的window的Documentations and API Reference里查看。 另外，文档的生成需要平时对项目的注释进行规范书写，这里不再赘述。 runscript案例2-对icon添加版本号等信息一直以来，做测试时都要区分版本号、git的提交序列、服务器测试还是正式环境等问题，想着在编译时，自动将这些信息贴在app的icon上就好了。直到在github上碰到了这个项目『github地址传送门』。 作者编写了个脚本，获取项目的版本号、git的提交序列等信息，然后使用imagemagick和ghostscript将这些信息绘制在了app的icon里。如果本地机器没有安装，则需要使用brew命令一键安装。 12$ brew install imagemagick$ brew install ghostscript 当使用debug模式进行编译时，则会出现如下的logo。当然，如果是release模式打包，则不会出现，具体可以参考runscrip脚本 『iconVersioning.sh』 在此基础上，我们还可以将应用服务器测试还是正式环境等其他参数都加到icon上，方便对产品进行标示。","tags":[{"name":"iOS","slug":"iOS","permalink":"http://iherr.cn/tags/iOS/"}]},{"title":"CocoaPods使用","date":"2016-05-10T03:22:03.000Z","path":"2016/05/10/CocoaPods使用/","text":"关于ruby、gem和brew（如已安装可跳过）ruby，一种脚本语言，和python类似。Mac OS X上自带。gem，是个用ruby写的应用程序，用来安装软件包的程序。brew，又叫Homebrew，是Mac OSX上的软件包管理工具，能使用命令在Mac中方便的安装软件或者卸载软件。 安装和卸载brewinstall brew1$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" remove brew（有时出问题需要卸载后再安装）1$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\" 升级mac自带ruby（使用RVM,需要brew支持）系统自带ruby一般较老，可以使用RVM进行升级。1$ curl -L get.rvm.io | bash -s stable 载入 RVM 环境1$ source ~/.rvm/scripts/rvm 检查一下是否安装正确1$ rvm -v 列出已知的ruby版本1$ rvm list known 安装目前最新的2.3版本1$ rvm install 2.3 查看ruby和gem版本1234$ ruby -vruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]$ gem -v2.5.1 如果需要单独更新gem1$ sudo gem update --system gem源更新，目前官方默认的地址被墙，使用淘宝镜像替换123456$ gem source -r https://rubygems.org/$ gem source -a https://ruby.taobao.org$ gem sources -l *** CURRENT SOURCES ***https://ruby.taobao.org/ 好啦。环境准备结束。 CocoaPods安装官网地址：『https://www.cocoapods.org』 比较权威的参考。 用gem安装下就好。1$ sudo gem install cocoapods 看下pod是否安装成功。12$ pod --version1.0.1 安装成功后，是需要同步pod repo的。因此可使用以下命令同步（此步骤推荐先跳过，建议后续更换pod repo源）。 1$ pod setup CocoaPods使用 为新建工程或在现有工程添加CocoaPods，cd到工程目录 12$ cd 'your project home dir'$ pod init 会自动生成Podfile文件，当然你也可以使用vim命令自己建。 $ vim Podfile 编辑Podfile，写入您需要的第三方库以及版本。小提示：（终端vim文件 按 i 可编辑 ，esc 退出编辑，:wq 可保存退出）。当然，您也完全可以通过Xcode和其他文本编辑器来进行。例如，给项目名为Test的添加AFNetworking和FMDB。 platform :ios, '6.0' target 'Test' do pod 'AFNetworking', '~&gt; 3.0' pod 'FMDB' end 安装导入第三方库 $ pod install 当然可可以指定安装某第三方库 $ pod install AFNetworking 当需要进行第三方库版本更新时，使用 $ pod update 当然可可以指定安装某第三方库 $ pod update AFNetworking 当需要查找某个第三方库信息时，例如查找AFNetworking，使用 $ pod search AFNetworking 注意，1.0版本pod进入查询后如需要退出，可输入 q + 回车。 有时操作时想print安装信息，可在所有命令后加–verbose。例如 $ pod install --verbose 在CocoaPods1.0以前，所有命令会默认自动执行pod repo update的，每次执行太恐怖了，可在所有命令后加–no-repo-update。会加快执行效率。例如 $ pod install --no-repo-update --verbose 但是在1.0版本以后，默认是不执行的。因此可以忽略掉。 CocoaPods的git仓库更新cocoapods有一个git仓库专门保存了github上一些有名的开源组件的podspec文件。cocoapods会把它clone到你本地的~/.cocoapods/repo/master路径下。当你pod search一个内容时，就在这个本地目录下进行搜索。 由于三方库版本更新，我们使用pod无法install、search到最新版本的内容，就需要进行git仓库的更新。我们可以使用如下命令进行更新： $ pod repo update --verbose 我们可以cd到pod repo目录里，用du -sh *命令来查看文件大小，每隔几分钟查看一次，看看是否有大小变化。笔者目前该目录大概700多M。 当使用上述命令时，会更新的非常慢，通过命令查询，发现托管到github上，有时也会被墙。 $ pod repo master - Type: git (master) - URL: https://github.com/CocoaPods/Specs.git - Path: /Users/herr/.cocoapods/repos/master 1 repo 如果大家不想被这个烦死的话，还是找找国内的镜像吧。 gitcafe（目前迁移到coding.net）和oschina都是国内的服务器，可以用它们CocoaPods索引库的镜像。目前发现oschina的http://git.oschina.net/akuandev/Specs.git更新较慢，于是还是使用coding.net上的吧，发现更好的随时替换，我对现在5MiB的速度还是很满意的。 $ pod repo remove master $ pod repo add master https://git.coding.net/hging/Specs.git $ git clone https://git.coding.net/hging/Specs.git ~/.cocoapods/repos/master $ pod repo update 再使用pod repo查看下，检查源的URL是否变更。 如果哪天发现更新后还不是最新的，可以登录我们刚刚配置的源地址『https://coding.net/u/hging/p/Specs/git』查看更新时间，如果较为久远，再去更换源。 高级进阶-CocoaPods私有库管理私有库管理，主要用于自己的代码，也想像pod管理第三方库一样进行管理。官方的文档如下，后续有时间再演示一遍整个流程。『http://guides.cocoapods.org/syntax/podspec.html』","tags":[{"name":"CocoaPods","slug":"CocoaPods","permalink":"http://iherr.cn/tags/CocoaPods/"}]},{"title":"初识Markdown","date":"2016-04-19T10:22:03.000Z","path":"2016/04/19/初识Markdown/","text":"Markdown使用场景以前只在github上接触了下md文件，遇到倒是简单，也通用。如今自己搭建博客，便得系统的了解下Markdown了。 说到使用场景，基本有以下几种： 需维护型文档：文档需要在多平台使用，如wiki平台、同事传阅、网站发布等。一般文档常用Word来写，但是如果文档一需要在网上发布就麻烦了，格式没有跟过来。如果一开始就是markdown语法，可以通用解决。 项目文档：项目文档一般都是用md来写的，github的项目的Readme.md就是markdown文档。 创意简历、博客：还有一种装逼手段就是用markdown来编写博客和简历，那绝对是创意来着的哦，适合程序员。 Markdown语法语法这玩意，我也是现学，找到一篇Markdown的文章，可以参考『Markdown 语法说明』 Markdown工具提到Markdown工具，作为一名简书控，平常写文章时，便使用的简书在线的Markdown编辑器了。想到这玩意还要联网就觉得写博客的场景不太适用。推荐『MacDown』，试了下对照预览、插入链接(Command+Shift+K)、图片(Command+Shift+I)，都还算方便。我在写这篇博文时的使用截图，如下图所示。 好啦，这玩意够用就好。不需要太精通。","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://iherr.cn/tags/Markdown/"}]},{"title":"第一篇博客","date":"2016-04-15T11:23:13.000Z","path":"2016/04/15/第一篇博客/","text":"终于用『Hexo』搭建完博客，感谢Litten提供的Yilia主题，真是爱不释手。以后，这里就是我的小窝啦。 先把整个流程梳理一遍，算是个hello world吧。 安装Hexo安装可以参考如下命令，blog为文件夹目录，可自己定义。如果提示npm没装，需要先安装npm。 12345$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 换个主题说实话，hexo默认给的主题，只能是凑活。如果要逼格高一点，那就得自己动手了。hexo官网有推荐一些『Theme』，可以链接到github上下载，现在使用的『Yilia主题』的资源可以点击查看。把他clone到本地，保存在目录/themes下即可。下图是我自己目前保存的一些主题。 那怎么实施主题的切换呢？可打开根目录的_config.yml配置文件，找到“theme: ”这一行，修改成/themes的对应主题名称即可。例如“theme: yilia”。 添加文章1$ hexo new \"My New Post\" More info: 『添加文章』 静态文件生成1$ hexo g 命令执行完成后，会更新public目录下的文件，都是一些静态的html、css、js、img之类的。 More info: 『静态文件生成』 启动本地服务1$ hexo s 启动完成后，会提示您访问的地址为http://localhost:4000/，如下图所示，你就可以在浏览器上访问啦。 More info: 『启动本地服务』 静态页面托管到GitHub Pages以上，您只能在本地浏览自己的博客，那如果需要放到网上供他人浏览呢？其实这里的方法有很多，比如自己弄台VPS云服务器等，但这不是有成本嘛。像阿里云最低配的基本也是需要100RMB/月，放博客不划算。 其实大家一般都推荐使用『GitHub Pages』来进行托管，无非是把“生成静态文件”步骤的文件上传到github上。具体的流程可以参考官网。唯一需要注意的是，托管的项目名称，必须以你的github的用户名起，例如我的github用户名是nisoch，那么我简历的项目名就是nisoch.github.io，后续上传后访问的地址也是https://nisoch.github.io/。 好啦，可以把这个地址发给小伙伴，或者自己访问了。 域名跳转看到其他大神的博客，都是有自己的域名，叫人好生羡慕。那么，从哪里才能弄到呢？这里不是做广告，而是我自己的域名是从『阿里云的万网』买的，购买域名的途径也很多其他途径，其实有一些很好的国际域名，例如『Godaddy』。 域名也买到了，开始做跳转指向了。无非是把刚买的宝贝域名，链接到GitHub Pages的域名上。 还是以万网举例，对CNAME类型，将www和@都指向自己的GitHub Pages的域名。如下图所示。 另外，为了保证GitHub Pages上能够识别，还需要一个CNAME文件，没有后缀，里面的内容为我们购买的域名地址，例如我的就是iherr.cn。 好啦，打完收工，可以使用自己的个性域名来访问了，快来试试吧。 补充：图片等资源处理刚写两篇，发现处理图片等资源好麻烦，我在macdown上进行编辑时预览插入图片，hexo g自动生成后，发现图片没有到/public里面去，当然在发布时还需要手动挪动图片，真是鱼和熊掌不可兼得嘛？ 看了下官方文档的『asset-folders』，原来提供了一种方便的方式。 首先在_config.yml配置文件中设置支持post_asset_folder， post_asset_folder: true。 针对之前没有配置的文档，需要在source/_posts目录下，手动新建一个同名标题的文件夹，例如md文件为“第一篇博客.md”，那就新建一个“第一篇博客”的文件夹。 针对后续的博文，直接使用hexo new “xxx”，即可同时生成md文件和同名文件夹，将这篇博文所有的需要用到的图片放入，引用图片时，链接的路径为“(文件夹名/*.png)”，满足本地写作时预览的需要。 当发布时，hexo g命令生成后，会发现会自动将图片放到发布的静态文件夹，且图片路径有了完美的生成。 添加百度统计真是拿做商业网站的规则来写博客呀，还是加个百度统计吧，虽然也没多少人看，也不需要分析。 编辑文件 themes/yilia/_config.yml,添加一行配置，可以删除原来的google analytics 1baidu_tongji: true 新建 themes/yilia/layout/_partial/baidu_tongji.ejs,内容如下 12345678910 &lt;% if (theme.baidu_tongji) &#123; %&gt; &lt;script type=\"text/javascript\"&gt; #申请的百度统计代码 &lt;/script&gt; &lt;% &#125; %&gt;``` 编辑themes/yilia/layout/_partial/head.ejs 在 &lt;/head&gt; 前添加``` bash &lt;%- partial(\"baidu_tongji\") %&gt;","tags":[{"name":"杂谈","slug":"杂谈","permalink":"http://iherr.cn/tags/杂谈/"}]}]